module project4(clk,MIDI_in,rst,LED_out);
input clk;
input MIDI_in;
input rst;
output [7:0] LED_out;
MIDI_data bytes(clk,MIDI_in,rst,LED_out);
endmodule

module MIDI_data(clk,MIDI_in,rst,LED_out);
input clk;
input MIDI_in;
input rst;
output [7:0] LED_out;
reg [15:0] cnt=0;	// register for baud rate counter
reg [2:0] index=0;	// index for MIDI_byte
reg [7:0] MIDI_byte=0;	// register for MIDI data byte
reg [3:0] state=0;	// tracks the state of the program
always @(posedge clk)
begin
	if(!rst)			// if reset button is pressed
	begin
		state<=4'b0000;		// reset the state
		MIDI_byte=0;		// and reset the MIDI data byte
	end
	case (state)
	4'b0000:	// first state, waiting for the first MIDI byte
	begin
		cnt<=0;		// keeps the count at zero while waiting
		if(!MIDI_in)			// if the first MIDI byte starts coming in
			state<=4'b0001;		// go to the next state
		else				// else
			state<=4'b0000;		// stay in this state
	end
	4'b0001:	// second state, "receiving" first MIDI byte
	begin
		if(cnt<1280)			// if the first MIDI byte is still coming in
		begin
			cnt<=cnt+1;		// increase the counter
			state<=4'b0001;		// and stay in this state
		end
		else				// else
		begin
			cnt<=0;			// reset the counter
			state<=4'b0010;		// and go to the next state
		end
	end
	4'b0010:	// third state, waiting for second MIDI byte
	begin
		cnt<=0;		// keeps the count
		index<=0;	// and index at zero while waiting
		if(!MIDI_in)			// if the second MIDI byte starts coming in
			state<=4'b0011;		// go to the next state
		else				// else
			state<=4'b0010;		// stay in this state
	end
	4'b0011:	// fourth state, check that we are receiving second MIDI byte
	begin
		if (cnt==127/2)		// check the middle of the incoming bit
		begin
			if(!MIDI_in)			// if it is still low, we are definitely receiving the second MIDI byte
			begin
				cnt<=0;			// reset the count
				state<=4'b0101;		// and go to the next state
			end
			else				// else
				state<=4'b0010;		// go back to waiting for the second byte
		end
		else			// if it is not yet the middle of the incoming bit
		begin
			cnt<=cnt+1;	// wait until it is
			state<=4'b0011;	// and stay in this state
		end
	end
// forgot to include a 4'b0100
// also, since we missed this and we only have eight states, we could have used a 3-bit register for the state instead of a 4-bit
	4'b0101:	// fifth state, receiving and storing second MIDI byte
	begin
		if(cnt<127)		// if we haven't gotten to the next bit
		begin
			cnt<=cnt+1;	// increment the counter
			state<=4'b0101;	// and stay in this state
		end
		else			// else
		begin
			cnt<=0;		// reset the counter
			MIDI_byte[index]<=MIDI_in;	// store the MIDI bit into the MIDI byte at the appropriate index
			if(index<7)		// if the MIDI byte is not full
			begin
				index<=index+1;	// move to the next index
				state<=4'b0101;	// and stay in this state
			end
			else			// else
			begin
				index<=0;	// reset the index
				state<=4'b0110;	// and go to the next state
			end
		end
	end
	4'b0110:	// sixth state, waiting until the end of the second MIDI byte
	begin
		if(cnt<127)		// if we haven't reached it yet
		begin
			cnt<=cnt+1;	// increment the counter
			state<=4'b0110;	// and stay in this state
		end
		else			// else
		begin
			cnt<=0;		// reset the counter
			state<=4'b0111;	// and go to the next state
		end
	end
	4'b0111:	// seventh state, waiting for third MIDI byte
	begin
		cnt<=0;		// keeps the counter at zero
		if(!MIDI_in)		// if the MIDI byte starts coming in
			state<=4'b1000;	// go to the next state
		else			// else
			state<=4'b0111;	// stay in this state
	end
	4'b1000:	// eighth state, "receiving" third MIDI byte
	begin
		if(cnt<1280)		// if we are still receiving it
		begin
			cnt<=cnt+1;	// increment the counter
			state<=4'b1000;	// and stay in this state
		end
		else			// else
		begin
			cnt<=0;		// reset the counter
			state<=4'b0000;	// and go to the first state
		end
	end
	endcase
end    
assign LED_out=MIDI_byte; 	// displays the second MIDI byte on the LEDs
endmodule
