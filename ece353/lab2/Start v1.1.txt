#include <avr/io.h>
#include <avr/delay.h>
#include <avr/iom32.h>
#include <avr/interrupt.h>

#define USART_BAUDRATE 31250
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)
//#define MOD_PIN PA5
//#define REC_PIN PA6
//#define PLAY_PIN PA7
//#define CUSTOM_PIN PA1
//#define CUSTOM_PIN2 PA0

unsigned char EEPROM_read(unsigned int);
void EEPROM_write(unsigned int,unsigned char);
unsigned char USART_read(void);
void USART_write(unsigned char);

 ISR(TIMER1_OVF_vect, ISR_NAKED)
      {
        TIMSK|=(1<<TOIE1);
      }

int main(void)
{	
	UCSRB = (1 << RXEN) | (1 << TXEN);   // Turn on the transmission and reception circuitry
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1); // Use 8-bit character sizes - URSEL bit set to select the UCRSC register

	UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
	UBRRL = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
	
	while(1)
	{	if(PINA & (1<<PA7))//record
		{	
			USART_recieve();
			EEPROM_write();	
		}
		if(PINA & (1<<PA6))//play
		{	EEPROM_read();
			if(PINA & (1<<PA5))//modify
			{
			}
			USART_transmit();
		}
	}
}

unsigned char EEPROM_read(unsigned int uiAddress)
{	while(EECR&(1<<EEWE))	// wait for completion of previous write
	EEAR=uiAddress;		// set up address register
	EECR|=(1<<EERE); 	// start eeprom read by writing EERE
	return(EEDR);		// return data from data register
}
void EEPROM_write(unsigned int uiAddress,unsigned char ucData)
{	while(EECR&(1<<EEWE))	// wait for completion of previous write
	;
	EEAR=uiAddress;		// set up address
	EEDR=ucData;		// and data registers
	EECR|=(1<<EEMWE);	// write logical one to EEMWE
	EECR|=(1<<EEWE);	// start eeprom write by setting EEWE
}
unsigned char USART_recieve(void)
{	while(!(UCSRA&(1<<RXC)))
	;			// wait for data to be received
	return(UDR);		// get and return received data from buffer
}
void USART_transmit(unsigned char data)
{	while(!(UCSRA&(1<<UDRE)))
	;			// wait for empty transmit buffer
	UDR=data;		// put data into buffer, sends the data
}
void LED_config(void)
{
	unsigned char i;
	PORTB=;
	DDRB=;
	_NOP();
	i=PINB;
}